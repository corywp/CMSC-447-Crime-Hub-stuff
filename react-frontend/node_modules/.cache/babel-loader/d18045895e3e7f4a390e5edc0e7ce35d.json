{"ast":null,"code":"/*:: type Attr = { [key: string]: string | number } */\n\n/*:: type Opts = { preserveNumbers: ?boolean } */\n\n/*\r\n\r\nstyle-attr\r\n====\r\n\r\nVery simple parsing and stringifying of style attributes.\r\n\r\n`parse`\r\n----\r\n\r\nConvert a style attribute string to an object.\r\n\r\n*/\n\n/*:: declare function parse (raw: string, opts: ?Opts): Attr */\nfunction parse(raw, opts) {\n  opts = opts || {};\n  var preserveNumbers = opts.preserveNumbers;\n\n  var trim = function (s) {\n    return s.trim();\n  };\n\n  var obj = {};\n  getKeyValueChunks(raw).map(trim).filter(Boolean).forEach(function (item) {\n    // split with `.indexOf` rather than `.split` because the value may also contain colons.\n    var pos = item.indexOf(':');\n    var key = item.substr(0, pos).trim();\n    var val = item.substr(pos + 1).trim();\n\n    if (preserveNumbers && isNumeric(val)) {\n      val = Number(val);\n    }\n\n    obj[key] = val;\n  });\n  return obj;\n}\n/*\r\n\r\n`isNumeric`\r\n----\r\n\r\nCheck if a value is numeric.\r\nVia: https://stackoverflow.com/a/1830844/9324\r\n\r\n*/\n\n/*:: declare function isNumeric (n: any): boolean */\n\n\nfunction isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}\n/*\r\n\r\n`getKeyValueChunks`\r\n----\r\n\r\nSplit a string into chunks matching `<key>: <value>`\r\n\r\n*/\n\n/*:: declare function getKeyValueChunks (raw: string): Array<string> */\n\n\nfunction getKeyValueChunks(raw) {\n  var chunks = [];\n  var offset = 0;\n  var sep = ';';\n  var hasUnclosedUrl = /url\\([^\\)]+$/;\n  var chunk = '';\n  var nextSplit;\n\n  while (offset < raw.length) {\n    nextSplit = raw.indexOf(sep, offset);\n\n    if (nextSplit === -1) {\n      nextSplit = raw.length;\n    }\n\n    chunk += raw.substring(offset, nextSplit); // data URIs can contain semicolons, so make sure we get the whole thing\n\n    if (hasUnclosedUrl.test(chunk)) {\n      chunk += ';';\n      offset = nextSplit + 1;\n      continue;\n    }\n\n    chunks.push(chunk);\n    chunk = '';\n    offset = nextSplit + 1;\n  }\n\n  return chunks;\n}\n/*\r\n\r\n`stringify`\r\n----\r\n\r\nConvert an object into an attribute string\r\n\r\n*/\n\n/*:: declare function stringify (obj: Attr): string */\n\n\nfunction stringify(obj) {\n  return Object.keys(obj).map(function (key) {\n    return key + ':' + obj[key];\n  }).join(';');\n}\n/*\r\n\r\n`normalize`\r\n----\r\n\r\nNormalize an attribute string (eg. collapse duplicates)\r\n\r\n*/\n\n/*:: declare function normalize (str: string, opts: ?Opts): string */\n\n\nfunction normalize(str, opts) {\n  return stringify(parse(str, opts));\n}\n\nmodule.exports.parse = parse;\nmodule.exports.stringify = stringify;\nmodule.exports.normalize = normalize;","map":null,"metadata":{},"sourceType":"script"}