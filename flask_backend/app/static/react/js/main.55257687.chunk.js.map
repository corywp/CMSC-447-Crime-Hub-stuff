{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","GetCrimes","window","location","origin","props","state","error","isLoaded","data","fetch","then","res","json","result","setState","this","message","className","x","y","token","map","key","post","crimedate","crimetime","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iIAAAA,EAAOC,QAAU,IAA0B,2B,4KC4F5BC,GAvFFC,OAAOC,SAASC,O,YAK3B,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,KACPC,UAAU,EACVC,KAAM,IALS,E,iFAUE,IAAD,OAClBC,MAAM,oCACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKC,SAAS,CACZP,UAAU,EACVC,KAAMK,OAMV,SAACP,GACC,EAAKQ,SAAS,CACZP,UAAU,EACVD,e,+BAMA,IAAD,EAC2BS,KAAKV,MAA/BC,EADD,EACCA,MAAOC,EADR,EACQA,SAAUC,EADlB,EACkBA,KACzB,OAAIF,EACK,uCAAaA,EAAMU,SAChBT,EAYR,yBAAKU,UAAU,OACf,kBAAC,WAAD,CACAT,KAAM,CACJ,CAACU,EAAG,IAAKC,EAAG,IACZ,CAACD,EAAG,IAAKC,EAAG,IACZ,CAACD,EAAG,IAAKC,EAAG,IACZ,CAACD,EAAG,IAAKC,EAAG,IACZ,CAACD,EAAG,IAAKC,EAAG,IACZ,CAACD,EAAG,IAAKC,EAAG,IACZ,CAACD,EAAG,IAAKC,EAAG,MAGd,yCAAelB,OAAOmB,OAGtB,4BACKZ,EAAKa,KAAI,SAAAb,GAAI,OACZ,wBAAIc,IAAKd,EAAKe,MACXf,EAAKgB,UADR,IACoBhB,EAAKiB,gBA7B1B,+C,GAtCWC,IAAMC,YCGVC,QACW,cAA7B3B,OAAOC,SAAS2B,UAEe,UAA7B5B,OAAOC,SAAS2B,UAEhB5B,OAAOC,SAAS2B,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,MAAK,SAAA4B,GACjCA,EAAaC,iB","file":"js/main.55257687.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"media/logo.25bf045c.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BarChart} from 'react-easy-chart';\n\nvar origin = window.location.origin;\nvar url = origin + '/api/crimes'\n\n\nclass GetCrimes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      data: []\n    };\n  }\n\n\n  componentDidMount() {\n    fetch(\"http://127.0.0.1:3000/api/crimes\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            data: result\n          });\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, data } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n      //   <div>\n      //   <p>\n      //     Rendered\n      //   </p>\n      //   <div>\n      //     this.state.data\n      //   </div>\n      // </div>\n        <div className=\"App\">\n        <BarChart\n        data={[\n          {x: 'A', y: 20},\n          {x: 'B', y: 30},\n          {x: 'C', y: 40},\n          {x: 'D', y: 20},\n          {x: 'E', y: 40},\n          {x: 'F', y: 25},\n          {x: 'G', y: 5}\n        ]}\n        />\n        <p>My Token = {window.token}</p>\n        {/* <p>Url = </p> */}\n        {/* <p>Data = {data}</p> */}\n        <ul>\n            {data.map(data => (\n              <li key={data.post}>\n                {data.crimedate} {data.crimetime}\n              </li>\n            ))}\n          </ul>\n        </div>\n      )\n    }\n  }\n}\n\n// function App() {\n//   return (\n//     <div>Test</div>\n//   )\n// }\n\nexport default GetCrimes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}